===================  Archive ===================================

tl;dr Please download, try out, and let me know your experiences using my desktop app for TechFolios.

Greetings all.  I have just completed the initial development of a cross-platform, desktop application called TechFolio Designer. Its goal to simplify the development and management of professional portfolios using TechFolios.

For those of you who have TechFolios (i.e. everyone who's taken ICS 314), I would like to request your help in evaluating this system.  If all goes well, I am hoping to start using it in ICS 314 this Fall, but I would like to get some preliminary evaluation of it before the semester starts.

Here are the things you can do to help evaluate the system:

1. Read the User Guide at http://techfolios.github.io/designer.html. Is it clear? Are there questions you have that are not answered by the Guide?

2. Download and install the system. There are binaries for Mac, Linux, and Windows, but I have only been able to test it on Mac. Did you run into any problems trying to run it? If so, please let me know what problems you had and what platform you were running it on.

3. Implement some updates to your TechFolio, and publish the changes.  Did everything go well? If not, what problems occurred?

4. Would you be interested in participating in an ICS 491 special topics class this fall on building desktop applications using Electron? My idea would be for you to spend the first part of the semester implementing improvements to TechFolio Designer (in order to get familiar with Electron, React, Redux, etc.) and then implement your own application during the second part of the semester.  LMK.

Thanks for your help! You can send your comments to this channel, or DM me, or send me an email, whatever works best for you.


## Packagine issue 2: Windows CI build
   - get appveyor to work with techfoliodesigner2
   - Need to encrypt GITHUB_TOKEN, other stuff to do probably.
   - "Activate encryption": http://hoverbaum.gitlab.io/2016/08/03/Building-Electron-based-applications-using-CIs/


## Packaging issues 1: MacOS CI build.
  - coding signing tutorial: https://electronjs.org/docs/tutorial/code-signing
   - osxsign https://github.com/electron-userland/electron-packager/blob/master/docs/api.md
   - travis ci code sign: https://jviotti.com/2016/03/16/how-to-code-sign-os-x-electron-apps-in-travis-ci.html


## File deletion
  -- Must be done manually.

## Authentication
  - Have to login twice.

## Logout
  - Have to go to github to revoke access.

## Authentication
  - Investigate https://github.com/pksunkara/octonode

## Redux material
  - https://www.youtube.com/watch?v=sX3KeP7v7Kg

## Nodegit problems
  Node V10 blocker: https://github.com/nodegit/nodegit/issues/1490
  Required prebuilt binary:
  https://axonodegit.s3.amazonaws.com/nodegit/nodegit/nodegit-v0.22.2-electron-v2.0-darwin-x64.tar.gz

## GitHub notes:

  - https://www.npmjs.com/package/nodegit-kit#commit-repo-options
  - add all: https://github.com/nodegit/nodegit/issues/121

  - Electron OAuth authentication with GitHub:
    https://gist.github.com/paulbbauer/2add0bdf0f4342df48ea

  - electron auth wrapper:
    https://www.npmjs.com/package/electron-auth
    https://www.npmjs.com/package/electron-oauth-github

  - create credentials for oauth app with github:
    https://developer.github.com/apps/building-oauth-apps/creating-an-oauth-app/
    https://medium.com/linagora-engineering/using-oauth-in-an-electron-application-abb0376c2ae0

  - logout
    https://stackoverflow.com/questions/12909332/how-to-logout-of-an-application-where-i-used-oauth2-to-login-with-google

## Implement CI with package build for releases.

## Misc stuff:
  - electron-util (macOS should run in app folder? https://github.com/sindresorhus/electron-util)
  - https://dzone.com/articles/learning-electron-4-things-i-wish-i-knew-sooner

## Notes about initial version of designer:

Useful packages:

* electron-prebuilt-compile: Support for React, Less, ES7.
* front-matter: Parse YAML
* fs-extra: drop-in replacement for fs; provides async/await support
* jimp: image processing library
* marked: parses markdown into HTML
* nodegit: git commands in node
* octonode: github authentication and manipulation
* react-datepicker: datepicker
* electron-oauth-github: (Not currently used) electron module for authenticating your Electron app with GitHub.

Questionable packages

* html-react-parser: converts an HTML string to a React element.
* html-tidy2: clean up poorly formatted HTML
* superagent: HTTP GET, PUT, etc.

Other resources

* [GitHub Authentication for Electron](https://medium.com/linagora-engineering/using-oauth-in-an-electron-application-abb0376c2ae0)
