Next steps:

## Remote repo specification
  - Unless the user has specified a value, then the remote repo defaults to username.github.io.
  - Provide a menu option to request the remote repo name manually using electron-prompt.
  - Write request to retrieve all public repos. show currently specified remote repo, as well as whether or not it appears to exist, in menu.

## Clone or pull
  - check whether the local dir is empty or a valid git repo.
  - if empty, and if (authenticated && remote repo is specified and valid), then action is to clone.
  - if non-empty, and if (authenticated && remote repo is specified and valid), then action is to pull.

## Logout
  - probably have to run the https request to logout along with access_token to really logout.


GitHub notes:
  - https://www.npmjs.com/package/nodegit-kit#commit-repo-options
  - add all: https://github.com/nodegit/nodegit/issues/121

  - Electron OAuth authentication with GitHub:
    https://gist.github.com/paulbbauer/2add0bdf0f4342df48ea

  - electron auth wrapper:
    https://www.npmjs.com/package/electron-auth
    https://www.npmjs.com/package/electron-oauth-github

  - create credentials for oauth app with github:
    https://developer.github.com/apps/building-oauth-apps/creating-an-oauth-app/
    https://medium.com/linagora-engineering/using-oauth-in-an-electron-application-abb0376c2ae0

  - logout
    https://stackoverflow.com/questions/12909332/how-to-logout-of-an-application-where-i-used-oauth2-to-login-with-google

## Implement CI with package build for releases.

## Misc stuff:
  - electron-util (macOS should run in app folder? https://github.com/sindresorhus/electron-util)
  - https://dzone.com/articles/learning-electron-4-things-i-wish-i-knew-sooner

## Notes about initial version of designer:

Useful packages:

* electron-prebuilt-compile: Support for React, Less, ES7.
* front-matter: Parse YAML
* fs-extra: drop-in replacement for fs; provides async/await support
* jimp: image processing library
* marked: parses markdown into HTML
* nodegit: git commands in node
* octonode: github authentication and manipulation
* react-datepicker: datepicker
* electron-oauth-github: (Not currently used) electron module for authenticating your Electron app with GitHub.

Questionable packages

* html-react-parser: converts an HTML string to a React element.
* html-tidy2: clean up poorly formatted HTML
* superagent: HTTP GET, PUT, etc.

Other resources

* [GitHub Authentication for Electron](https://medium.com/linagora-engineering/using-oauth-in-an-electron-application-abb0376c2ae0)

Code notes

* secret.js needs to be dealt with somehow.

